buildscript {
	ext {
		kotlinVer = '1.1.51'

		slf4jVer = '1.7.25'
		kotlinLoggingVer = '1.4.6'
		logbackVer = '1.2.3'
		jAnsiVer = '1.16'

		undertowVer = '1.4.20.Final'
		jacksonVer = '2.9.1'

		junitJupiterVer = '5.0.1'
		junitPlatformVer = '1.0.1'

		okHttpVer = '3.9.0'

		versionPluginVer = '0.15.0'
		shadowPluginVer = '2.0.1'
		dockerPluginVer = '0.13.0'
	}

	repositories {
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/' }
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVer"
		classpath "com.github.jengelman.gradle.plugins:shadow:$shadowPluginVer"
		// gradle dependencyUpdates -Drevision=release
		classpath "com.github.ben-manes:gradle-versions-plugin:$versionPluginVer"
		classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:$dockerPluginVer"
		classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVer"
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.palantir.docker'

group = 'li.barlog.template.kotlin'
version = '0.1-SNAPSHOT'

mainClassName = 'app.AppKt'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
	options.fork = true
	options.incremental = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

sourceSets {
	main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
}

repositories {
	jcenter()
}

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
	//compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVer"

	compile "io.github.microutils:kotlin-logging:$kotlinLoggingVer"

	compile "org.slf4j:slf4j-api:$slf4jVer"
	compile "ch.qos.logback:logback-classic:$logbackVer"
	compile "org.fusesource.jansi:jansi:$jAnsiVer"
	compile "org.slf4j:jcl-over-slf4j:$slf4jVer"

	compile "io.undertow:undertow-core:$undertowVer"

	compile "com.fasterxml.jackson.core:jackson-core:$jacksonVer"
	compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVer"
	compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVer"
	compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVer"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVer"
	//compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVer"

	testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVer"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVer"
	testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVer"

	testCompile "com.squareup.okhttp3:okhttp:$okHttpVer"
	testCompile "com.squareup.okhttp3:logging-interceptor:$okHttpVer"
}

junitPlatform {
	enableStandardTestTask true
}

tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors()
}

shadowJar {
	baseName = 'app'
	classifier = null
	version = null
}

wrapper {
	gradleVersion '4.2.1'
}

// https://github.com/palantir/gradle-docker
// gradle docker
docker {
	dependsOn shadowJar
	name 'info'
	tags 'latest'
	files shadowJar.outputs
	dockerfile file('src/main/docker/Dockerfile')
	buildArgs([
		JAVA_OPTS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap',
		PORT     : "8080"
	])
	pull true
}

task stage(dependsOn: ['shadowJar', 'clean'])
